import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'Autogenerated.dart';
import 'CategoryData.dart';
import 'CategoryProvider.dart';
import 'ProductProvider.dart';


class HomePage extends StatefulWidget{
  const HomePage({super.key, required this.title});
  final String title;
  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage>{
  final String title = "";
  int currentPageIndex = 0;


  final List _data =[
    {"text": "Snekers","image": "assets/images/snekers.png"},
    {"text": "Watch","image": "assets/images/watch.jpg"},
    {"text": "Jacket","image": "assets/images/jacket.png"},
    {"text": "Bag","image": "assets/images/bag.jpg"},
    {"text": "Wallet","image": "assets/images/wallet.jpg"},
  ];

  Future<List<Autogenerated>> ?productFuture;
  Future<List<CategoryData>> ?categoryFuture;


  final List _selectedIndexs=[];

  void getProduct(ProductProvider productProvider){
    productFuture = productProvider.getProduct();
  }
  void getCategory(CategoryProvider categoryProvider){
    categoryFuture = categoryProvider.getCategory();
  }


  @override
  void initState() {
    getProduct(context.read<ProductProvider>());
    getCategory(context.read<CategoryProvider>());
    super.initState();
  }

  void inserData(){

  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        actions: <Widget>[
          IconButton(
            icon: const Icon(Icons.account_circle_rounded),
            onPressed: () {
              setState(() {

              });
            },
          )
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.only(left: 15,right: 15),
        child: Column(
          children: [
            const Align(alignment: Alignment.centerLeft,child: Text("Our",style: TextStyle(fontSize: 30))),
            const Align(alignment: Alignment.centerLeft,child: Text("Products",style: TextStyle(fontSize: 30,fontWeight: FontWeight.bold))),
            Padding(
              padding: const EdgeInsets.only(top: 10),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  Container(
                    width: 270,
                    height: 50,
                    child: TextField(
                      decoration: InputDecoration(
                          prefixIcon: const Icon(Icons.search),
                          hintText: 'Search Products',
                          filled: true,
                          fillColor: const Color(0xFFf3f3f2),
                          enabledBorder: OutlineInputBorder(
                              borderSide: const BorderSide(
                                  color: Color(0xFFf3f3f2), width: 1),
                              borderRadius: BorderRadius.circular(10)),
                          //labelText: "01266",
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(10),
                            borderSide: const BorderSide(),
                          )),
                      keyboardType: TextInputType.text,
                    ),

                  ),
                  Card(elevation: 3,
                    child:Container(height: 50,width: 50,child:
                    const Icon(Icons.shuffle),) ,
                  )
                ],
              ),
            ),

            //category

            Container(margin: const EdgeInsets.symmetric(vertical: 20),
              height: 50,
              child: FutureBuilder<List<CategoryData>>(
                future: categoryFuture,
                builder: (context, snapshot) {
                  if (!snapshot.hasData){
                    return const CircularProgressIndicator();
                  }
                  else{
                    return ListView.builder(
                      itemCount: snapshot.data?.length,
                      itemBuilder: (BuildContext context, int index){
                        final _isSelected=_selectedIndexs.contains(index);
                        return Ink(
                          child: InkWell(
                            child: Padding(
                              padding: const EdgeInsets.only(right: 10),
                              child: Container(
                                decoration: BoxDecoration(
                                  border: Border.all(width: 1, color: _isSelected?Colors.red:Colors.black12),
                                  borderRadius: BorderRadius.circular(6),
                                  color: Colors.white,
                                ),
                                child: Row(mainAxisAlignment: MainAxisAlignment.spaceEvenly,children: [
                                  //Icon(data["icon"]),
                                  //Image.asset(data["image"],width: 30,height: 30),
                                  Image.network(snapshot.data?[index].image?? "",height: 50),
                                  Padding(
                                    padding: const EdgeInsets.only(right: 7,left: 5),
                                    child: Text(snapshot.data?[index].name ?? "",style: const TextStyle(fontWeight: FontWeight.bold),),
                                  )
                                ]),
                              ),
                            ),
                            onTap: (){
                              setState(() {
                                if(_isSelected){
                                  _selectedIndexs.remove(index);

                                }else{
                                  _selectedIndexs.add(index);

                                }
                                //_containerColor = Colors.redAccent;
                              });
                            },
                          ),
                        );
                      },
                      scrollDirection: Axis.horizontal,
                    );
                  }
                },

              ),),

            //item

            Container(
              height: 300,
              child:
              FutureBuilder<List<Autogenerated>>(
                future: productFuture,
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    return  GridView.count(
                      childAspectRatio: MediaQuery.of(context).size.height / 1100,
                      physics: const AlwaysScrollableScrollPhysics(),
                      crossAxisCount: 2,
                      children: List.generate(snapshot.data?.length?? 0,(index) {
                        return Padding(
                          padding: const EdgeInsets.only(right: 10,bottom: 10),
                          child: InkWell(
                            child: Card(elevation: 1.5,
                                child: Container(
                                  width: 160,
                                  height: 200,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(14),
                                    color: Colors.white,
                                  ),
                                  child:  Column(children: [
                                    const Padding(
                                      padding: EdgeInsets.only(top: 10,left: 15),
                                      child: Align(alignment: Alignment.centerLeft,
                                          child: Icon(Icons.favorite_border)),
                                    ),
                                    Image.network(snapshot.data?[index].images?.first??'',height: 100),
                                    Padding(
                                      padding: const EdgeInsets.only(left: 10,right: 0),
                                      child: Text(snapshot.data?[index].title ?? "",style: const TextStyle(fontWeight: FontWeight.bold,fontSize: 12),),
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.only(left: 35,top: 5,bottom: 5),
                                      child: Row(children: [
                                        const Text('\$',style: TextStyle(fontWeight: FontWeight.bold,fontSize: 10,color: Colors.deepOrange),),
                                        Text('${snapshot.data?[index].price ?? 0}' ,style: const TextStyle(fontWeight: FontWeight.bold,fontSize: 18),),
                                      ],),
                                    )
                                  ]),
                                )),onTap: (){
                            setState(() {
                            });
                          },
                          ),
                        );
                      }),
                    );
                  } else if (snapshot.hasError) {
                    return Text(snapshot.error.toString());
                  }
                  // By default show a loading spinner.
                  return const CircularProgressIndicator();
                },
              )

              ,),
            //item
          ],
        ),
      ),
    );


  }
}